"""Events related to vulnerability assessment.

This module contains event classes used for vulnerability assessment workflows.
"""

from typing import Dict, List, Any, Optional
import autogen_core
from autogen_core import event


# Create a BaseEvent class that has similar interface to the one from autogen_core 0.2.2
class BaseEvent:
    """Base class for events with compatibility with older autogen_core versions."""

    def __init__(self, sender: str, target: Optional[str] = None, **kwargs):
        """Initialize a base event.

        Args:
            sender: Event sender
            target: Optional event target
            **kwargs: Additional event attributes
        """
        self.sender = sender
        self.target = target
        for key, value in kwargs.items():
            setattr(self, key, value)


class KnowledgeRetrievalEvent(BaseEvent):
    """Event emitted when knowledge is retrieved."""

    def __init__(
        self,
        sender: str,
        query: str,
        results: List[Dict[str, Any]],
        target: Optional[str] = None,
    ):
        """Initialize the knowledge retrieval event.

        Args:
            sender: The ID of the sender
            query: The query used for retrieval
            results: The retrieved results
            target: Optional target agent ID
        """
        super().__init__(
            sender=sender,
            target=target,
            query=query,
            results=results,
        )


class VulnerabilityDiscoveryEvent(BaseEvent):
    """Event emitted when a vulnerability is discovered."""

    def __init__(
        self,
        sender: str,
        vulnerability_type: str,
        file_path: str,
        line_number: int,
        severity: str,
        confidence: float,
        description: str,
        remediation: Optional[str] = None,
        target: Optional[str] = None,
    ):
        """Initialize the vulnerability discovery event.

        Args:
            sender: The ID of the sender
            vulnerability_type: The type of vulnerability
            file_path: The path to the file containing the vulnerability
            line_number: The line number of the vulnerability
            severity: The severity of the vulnerability
            confidence: The confidence level (0-1)
            description: The description of the vulnerability
            remediation: Optional remediation guidance
            target: Optional target agent ID
        """
        super().__init__(
            sender=sender,
            target=target,
            vulnerability_type=vulnerability_type,
            file_path=file_path,
            line_number=line_number,
            severity=severity,
            confidence=confidence,
            description=description,
            remediation=remediation,
        )


class VulnerabilityVerificationEvent(BaseEvent):
    """Event emitted when a vulnerability is verified."""

    def __init__(
        self,
        sender: str,
        vulnerability_id: str,
        verified: bool,
        verification_method: str,
        confidence: float,
        notes: Optional[str] = None,
        target: Optional[str] = None,
    ):
        """Initialize the vulnerability verification event.

        Args:
            sender: The ID of the sender
            vulnerability_id: The ID of the vulnerability
            verified: Whether the vulnerability was verified
            verification_method: The method used for verification
            confidence: The confidence level (0-1)
            notes: Optional notes about the verification
            target: Optional target agent ID
        """
        super().__init__(
            sender=sender,
            target=target,
            vulnerability_id=vulnerability_id,
            verified=verified,
            verification_method=verification_method,
            confidence=confidence,
            notes=notes,
        )


class RemediationEvent(BaseEvent):
    """Event emitted when remediation guidance is provided."""

    def __init__(
        self,
        sender: str,
        vulnerability_id: str,
        remediation: str,
        difficulty: str,
        impact: str,
        target: Optional[str] = None,
    ):
        """Initialize the remediation event.

        Args:
            sender: The ID of the sender
            vulnerability_id: The ID of the vulnerability
            remediation: The remediation guidance
            difficulty: The difficulty of implementing the remediation
            impact: The potential impact of the remediation
            target: Optional target agent ID
        """
        super().__init__(
            sender=sender,
            target=target,
            vulnerability_id=vulnerability_id,
            remediation=remediation,
            difficulty=difficulty,
            impact=impact,
        )
