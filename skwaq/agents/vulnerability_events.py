"""Event classes for legacy vulnerability assessment agents.

This module defines the events used by legacy vulnerability assessment agents.
"""

from typing import Dict, List, Any, Optional, Mapping, Type, TypeVar

# Define a base event type for static typing
BaseEventType = TypeVar('BaseEventType')

# Try to import autogen_core
try:
    from autogen_core.event import BaseEvent as AutogenBaseEvent  # type: ignore
    
    class BaseEvent(AutogenBaseEvent):  # type: ignore
        """Base event class wrapper."""
        pass
        
    HAS_AUTOGEN = True
except ImportError:
    # Define dummy class for autogen_core
    class BaseEvent:
        """Base event class when autogen_core is not available."""

        def __init__(self, **kwargs: Any) -> None:
            self.__dict__.update(kwargs)
    
    HAS_AUTOGEN = False


class VulnResearchEvent(BaseEvent):  # type: ignore
    """Base class for all vulnerability research events."""

    def __init__(self, sender: str, target: Optional[str] = None, **kwargs: Any) -> None:
        """Initialize a vulnerability research event.

        Args:
            sender: The component that sent the event
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(**kwargs)
        self.sender = sender
        self.target = target
        for key, value in kwargs.items():
            setattr(self, key, value)


class CodeAnalysisEvent(VulnResearchEvent):
    """Event emitted when code analysis is performed."""

    def __init__(
        self,
        sender: str,
        repository_id: str,
        file_path: str,
        language: str,
        target: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Initialize a code analysis event.

        Args:
            sender: The component that sent the event
            repository_id: ID of the repository being analyzed
            file_path: Path to the file being analyzed
            language: Programming language of the code
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(
            sender=sender,
            target=target,
            repository_id=repository_id,
            file_path=file_path,
            language=language,
            **kwargs,
        )


class KnowledgeRetrievalEvent(VulnResearchEvent):
    """Event emitted when knowledge is retrieved from the database."""

    def __init__(
        self,
        sender: str,
        query: str,
        context: Optional[Dict[str, Any]] = None,
        target: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Initialize a knowledge retrieval event.

        Args:
            sender: The component that sent the event
            query: The knowledge query
            context: Context for the query
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(
            sender=sender, target=target, query=query, context=context or {}, **kwargs
        )


class VulnerabilityFindingEvent(VulnResearchEvent):
    """Event emitted when a vulnerability is found."""

    def __init__(
        self,
        sender: str,
        repository_id: str,
        file_path: str,
        line_number: int,
        vulnerability_type: str,
        severity: str,
        confidence: float,
        description: str,
        cwe_id: Optional[str] = None,
        target: Optional[str] = None,
        **kwargs: Any,
    ) -> None:
        """Initialize a vulnerability finding event.

        Args:
            sender: The component that sent the event
            repository_id: ID of the repository
            file_path: Path to the file
            line_number: Line number of the vulnerability
            vulnerability_type: Type of vulnerability
            severity: Severity level
            confidence: Confidence level (0-1)
            description: Description of the vulnerability
            cwe_id: Optional CWE ID
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(
            sender=sender,
            target=target,
            repository_id=repository_id,
            file_path=file_path,
            line_number=line_number,
            vulnerability_type=vulnerability_type,
            severity=severity,
            confidence=confidence,
            description=description,
            cwe_id=cwe_id,
            **kwargs,
        )