"""Agent module for specialized vulnerability assessment agents.

This module implements various specialized agents for performing different
aspects of vulnerability assessment.
"""

from typing import Dict, List, Any, Optional, Set, Callable, Awaitable, Type
import json
import asyncio

from autogen_core.agent import Agent, ChatAgent
from autogen_core.event import BaseEvent, Event, EventHook, register_hook
from autogen_core.code_utils import extract_code
from autogen_core.memory import MemoryRecord

from ..utils.config import get_config
from ..utils.logging import get_logger
from ..core.openai_client import get_openai_client

logger = get_logger(__name__)


class VulnResearchEvent(BaseEvent):
    """Base class for all vulnerability research events."""

    def __init__(self, sender: str, target: Optional[str] = None, **kwargs):
        super().__init__(sender=sender, target=target, **kwargs)


class CodeAnalysisEvent(VulnResearchEvent):
    """Event emitted when code analysis is performed."""

    def __init__(
        self,
        sender: str,
        file_path: str,
        language: str,
        code_snippet: str,
        analysis: str,
        target: Optional[str] = None,
    ):
        super().__init__(
            sender=sender,
            target=target,
            file_path=file_path,
            language=language,
            code_snippet=code_snippet,
            analysis=analysis,
        )


class VulnerabilityDiscoveryEvent(VulnResearchEvent):
    """Event emitted when a potential vulnerability is discovered."""

    def __init__(
        self,
        sender: str,
        vulnerability_type: str,
        description: str,
        evidence: str,
        severity: Optional[str] = None,
        cwe_id: Optional[str] = None,
        target: Optional[str] = None,
    ):
        super().__init__(
            sender=sender,
            target=target,
            vulnerability_type=vulnerability_type,
            description=description,
            evidence=evidence,
            severity=severity or "Unknown",
            cwe_id=cwe_id,
        )


class KnowledgeRetrievalEvent(VulnResearchEvent):
    """Event emitted when knowledge is retrieved from the database."""

    def __init__(
        self,
        sender: str,
        query: str,
        results: List[Dict[str, Any]],
        target: Optional[str] = None,
    ):
        super().__init__(
            sender=sender,
            target=target,
            query=query,
            results=results,
        )


class SkwaqAgent(ChatAgent):
    """Base class for all Skwaq vulnerability assessment agents.
    
    This class extends the AutoGen ChatAgent with specialized functionality
    for vulnerability assessment tasks.
    """

    def __init__(
        self,
        name: str,
        system_message: str,
        description: Optional[str] = None,
        event_hooks: Optional[Dict[Type[BaseEvent], List[EventHook]]] = None,
        **kwargs,
    ):
        """Initialize a Skwaq agent.
        
        Args:
            name: The name of the agent
            system_message: System message for the agent's chat model
            description: Optional description of the agent's purpose
            event_hooks: Optional dictionary mapping event types to hooks
            **kwargs: Additional arguments passed to the parent class
        """
        # Use Azure OpenAI by default
        llm_config = kwargs.get("llm_config", {})
        config = get_config()
        
        # Set up the LLM configuration if not provided
        if not llm_config:
            llm_config = {
                "config_list": [
                    {
                        "model": config.get("openai", {}).get("chat_model", "gpt4o"),
                        "api_key": config.openai_api_key,
                        "api_type": "azure",
                        "api_version": config.get("openai", {}).get("api_version", "2023-05-15"),
                        "azure_endpoint": config.get("openai", {}).get("endpoint", 
                                                  "https://skwaq-openai.openai.azure.com/"),
                    }
                ],
            }
            kwargs["llm_config"] = llm_config
        
        super().__init__(name=name, **kwargs)
        
        self.system_message = system_message
        self.description = description or f"{name} Agent"
        self.registered_events: Set[Type[BaseEvent]] = set()
        
        # Register event hooks
        if event_hooks:
            for event_type, hooks in event_hooks.items():
                for hook in hooks:
                    self.register_event_hook(event_type, hook)
    
    def register_event_hook(
        self, 
        event_type: Type[BaseEvent], 
        hook: EventHook,
    ) -> None:
        """Register an event hook for a specific event type.
        
        Args:
            event_type: The type of event to listen for
            hook: The hook function to call when the event occurs
        """
        register_hook(event_type, hook)
        self.registered_events.add(event_type)
        logger.debug(f"Agent {self.name} registered hook for {event_type.__name__}")
    
    async def _process_received_event(self, event: BaseEvent) -> None:
        """Process a received event.
        
        Args:
            event: The event to process
        """
        # Default implementation just logs the event
        logger.debug(f"Agent {self.name} received event: {event}")
    
    def emit_event(self, event: BaseEvent) -> None:
        """Emit an event to the event system.
        
        Args:
            event: The event to emit
        """
        Event.add(event)
        logger.debug(f"Agent {self.name} emitted event: {type(event).__name__}")


class OrchestratorAgent(SkwaqAgent):
    """The main orchestrator agent for vulnerability assessment.
    
    This agent coordinates the activities of all other specialized agents
    and manages the overall workflow.
    """

    def __init__(
        self,
        name: str = "Orchestrator",
        system_message: Optional[str] = None,
        **kwargs,
    ):
        if system_message is None:
            system_message = """You are the orchestrator agent for a vulnerability assessment system.
Your role is to coordinate the activities of all specialized agents, manage workflows,
and ensure the overall process runs smoothly. You should maintain a high-level view
of the assessment, delegate tasks to appropriate specialist agents, and synthesize
their findings into comprehensive reports."""
            
        super().__init__(
            name=name,
            system_message=system_message,
            description="Coordinates the overall vulnerability assessment process",
            **kwargs,
        )
        
        # Register for relevant events
        self.register_event_hook(VulnerabilityDiscoveryEvent, self._on_vulnerability_discovered)
    
    async def _on_vulnerability_discovered(self, event: VulnerabilityDiscoveryEvent) -> None:
        """Handle a vulnerability discovery event.
        
        Args:
            event: The vulnerability discovery event
        """
        # Log the discovery
        logger.info(f"Vulnerability discovered: {event.vulnerability_type} - {event.description}")
        
        # Add to the agent's memory
        memory_record = MemoryRecord(
            role="system",
            content=f"Vulnerability discovered: {event.vulnerability_type}\n{event.description}\nEvidence: {event.evidence}\nSeverity: {event.severity}",
        )
        await self.register_memory(memory_record)


class KnowledgeAgent(SkwaqAgent):
    """Agent responsible for managing and retrieving background knowledge.
    
    This agent handles interactions with the knowledge database and provides
    relevant information to other agents.
    """

    def __init__(
        self,
        name: str = "KnowledgeAgent",
        system_message: Optional[str] = None,
        **kwargs,
    ):
        if system_message is None:
            system_message = """You are the knowledge agent for a vulnerability assessment system.
Your role is to retrieve and provide relevant background knowledge about vulnerabilities,
security concepts, and best practices. You have access to a database of expert knowledge
and can answer questions or provide relevant information to assist other agents in their tasks."""
            
        super().__init__(
            name=name,
            system_message=system_message,
            description="Manages and retrieves background knowledge about vulnerabilities",
            **kwargs,
        )
    
    async def retrieve_knowledge(self, query: str) -> List[Dict[str, Any]]:
        """Retrieve relevant knowledge based on a query.
        
        Args:
            query: The natural language query to search for
            
        Returns:
            List of relevant knowledge entries
        """
        # TODO: Implement knowledge retrieval using Neo4j
        # This is a placeholder implementation
        logger.info(f"Knowledge retrieval request: {query}")
        
        # Emit knowledge retrieval event
        self.emit_event(
            KnowledgeRetrievalEvent(
                sender=self.name,
                query=query,
                results=[],  # Empty for now
            )
        )
        
        return []


class CodeAnalysisAgent(SkwaqAgent):
    """Agent responsible for analyzing code for potential vulnerabilities.
    
    This agent performs static code analysis and identifies patterns that
    may indicate security vulnerabilities.
    """

    def __init__(
        self,
        name: str = "CodeAnalysisAgent",
        system_message: Optional[str] = None,
        **kwargs,
    ):
        if system_message is None:
            system_message = """You are the code analysis agent for a vulnerability assessment system.
Your role is to analyze source code for potential security vulnerabilities. You should
look for common patterns that may indicate security issues, such as injection vulnerabilities,
improper authentication, insecure cryptography, and other common weaknesses. When you
find a potential issue, provide a detailed explanation of the problem and potential mitigations."""
            
        super().__init__(
            name=name,
            system_message=system_message,
            description="Analyzes code for potential security vulnerabilities",
            **kwargs,
        )
    
    async def analyze_code(self, file_path: str, language: str, code: str) -> str:
        """Analyze code for potential vulnerabilities.
        
        Args:
            file_path: Path to the file being analyzed
            language: Programming language of the code
            code: The code content to analyze
            
        Returns:
            Analysis results as a string
        """
        logger.info(f"Analyzing code in {file_path}")
        
        # Request analysis from the LLM
        prompt = f"""Analyze the following {language} code for potential security vulnerabilities:

```{language}
{code}
```

Focus on:
1. Input validation issues
2. Authentication/authorization flaws
3. Cryptographic problems
4. Injection vulnerabilities
5. Insecure configurations
6. Race conditions
7. Resource leaks

For each potential vulnerability, provide:
- A description of the issue
- The location in the code
- Severity (Critical, High, Medium, Low)
- Potential mitigation strategies
- CWE ID if applicable

Format your response as a structured analysis.
"""
        # Use the OpenAI client to get the analysis
        openai_client = get_openai_client(async_mode=True)
        analysis = await openai_client.get_completion(prompt, temperature=0.2)
        
        # Emit code analysis event
        self.emit_event(
            CodeAnalysisEvent(
                sender=self.name,
                file_path=file_path,
                language=language,
                code_snippet=code[:100] + "..." if len(code) > 100 else code,
                analysis=analysis,
            )
        )
        
        return analysis


class VulnerabilityResearchAgent(SkwaqAgent):
    """Agent responsible for in-depth vulnerability research.
    
    This agent conducts thorough investigations of potential vulnerabilities,
    gathering evidence and assessing impact and exploitability.
    """

    def __init__(
        self,
        name: str = "VulnResearchAgent",
        system_message: Optional[str] = None,
        **kwargs,
    ):
        if system_message is None:
            system_message = """You are the vulnerability research agent for a vulnerability assessment system.
Your role is to conduct in-depth investigations of potential vulnerabilities identified
by other agents. You should gather evidence to confirm the vulnerability, assess its
impact and exploitability, and provide detailed reports that can help developers
understand and fix the issues."""
            
        super().__init__(
            name=name,
            system_message=system_message,
            description="Conducts in-depth vulnerability research and assessment",
            **kwargs,
        )
    
    async def research_vulnerability(
        self,
        vulnerability_type: str,
        evidence: str,
        context: Optional[Dict[str, Any]] = None,
    ) -> Dict[str, Any]:
        """Research a potential vulnerability to confirm and assess it.
        
        Args:
            vulnerability_type: Type of vulnerability to research
            evidence: Initial evidence or indicators
            context: Additional context information
            
        Returns:
            Dictionary with research findings
        """
        logger.info(f"Researching potential {vulnerability_type} vulnerability")
        
        # TODO: Implement detailed vulnerability research
        # This is a placeholder implementation
        
        findings = {
            "vulnerability_type": vulnerability_type,
            "confirmed": True,  # Placeholder
            "severity": "High",  # Placeholder
            "description": f"Confirmed {vulnerability_type} vulnerability based on provided evidence.",
            "remediation": "Implement proper input validation and output encoding.",
            "cwe_id": "CWE-79",  # Placeholder
        }
        
        # Emit vulnerability discovery event if confirmed
        if findings["confirmed"]:
            self.emit_event(
                VulnerabilityDiscoveryEvent(
                    sender=self.name,
                    vulnerability_type=findings["vulnerability_type"],
                    description=findings["description"],
                    evidence=evidence,
                    severity=findings["severity"],
                    cwe_id=findings["cwe_id"],
                )
            )
        
        return findings