"""Agent module for specialized vulnerability assessment agents.

This module implements various specialized agents for performing different
aspects of vulnerability assessment.
"""

from typing import Dict, List, Any, Optional, Set, Callable, Awaitable, Type
import json
import asyncio

try:
    # Try to import autogen_core
    from autogen_core.agent import Agent, ChatAgent
    from autogen_core.event import BaseEvent, Event, EventHook, register_hook
    from autogen_core.code_utils import extract_code
    from autogen_core.memory import MemoryRecord

    HAS_AUTOGEN = True
except ImportError:
    # Define dummy classes for autogen_core
    class BaseEvent:
        """Base event class when autogen_core is not available."""

        def __init__(self, **kwargs):
            self.__dict__.update(kwargs)

    class Event:
        """Event class when autogen_core is not available."""

        @staticmethod
        def add(event):
            """Dummy method to add an event."""
            pass

    class EventHook:
        """Event hook class when autogen_core is not available."""

        pass

    class MemoryRecord:
        """Memory record class when autogen_core is not available."""

        def __init__(self, role, content):
            self.role = role
            self.content = content

    HAS_AUTOGEN = False

from ..utils.config import get_config
from ..utils.logging import get_logger
from ..core.openai_client import get_openai_client

logger = get_logger(__name__)


class VulnResearchEvent(BaseEvent):
    """Base class for all vulnerability research events."""

    def __init__(self, sender: str, target: Optional[str] = None, **kwargs):
        """Initialize a vulnerability research event.

        Args:
            sender: The component that sent the event
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(**kwargs)
        self.sender = sender
        self.target = target
        for key, value in kwargs.items():
            setattr(self, key, value)


class CodeAnalysisEvent(VulnResearchEvent):
    """Event emitted when code analysis is performed."""

    def __init__(
        self,
        sender: str,
        repository_id: str,
        file_path: str,
        language: str,
        target: Optional[str] = None,
        **kwargs,
    ):
        """Initialize a code analysis event.

        Args:
            sender: The component that sent the event
            repository_id: ID of the repository being analyzed
            file_path: Path to the file being analyzed
            language: Programming language of the code
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(
            sender=sender,
            target=target,
            repository_id=repository_id,
            file_path=file_path,
            language=language,
            **kwargs,
        )


class KnowledgeRetrievalEvent(VulnResearchEvent):
    """Event emitted when knowledge is retrieved from the database."""

    def __init__(
        self,
        sender: str,
        query: str,
        context: Optional[Dict[str, Any]] = None,
        target: Optional[str] = None,
        **kwargs,
    ):
        """Initialize a knowledge retrieval event.

        Args:
            sender: The component that sent the event
            query: The knowledge query
            context: Context for the query
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(
            sender=sender, target=target, query=query, context=context or {}, **kwargs
        )


class VulnerabilityFindingEvent(VulnResearchEvent):
    """Event emitted when a vulnerability is found."""

    def __init__(
        self,
        sender: str,
        repository_id: str,
        file_path: str,
        line_number: int,
        vulnerability_type: str,
        severity: str,
        confidence: float,
        description: str,
        cwe_id: Optional[str] = None,
        target: Optional[str] = None,
        **kwargs,
    ):
        """Initialize a vulnerability finding event.

        Args:
            sender: The component that sent the event
            repository_id: ID of the repository
            file_path: Path to the file
            line_number: Line number of the vulnerability
            vulnerability_type: Type of vulnerability
            severity: Severity level
            confidence: Confidence level (0-1)
            description: Description of the vulnerability
            cwe_id: Optional CWE ID
            target: Optional target component for the event
            **kwargs: Additional event attributes
        """
        super().__init__(
            sender=sender,
            target=target,
            repository_id=repository_id,
            file_path=file_path,
            line_number=line_number,
            vulnerability_type=vulnerability_type,
            severity=severity,
            confidence=confidence,
            description=description,
            cwe_id=cwe_id,
            **kwargs,
        )


class BaseVulnerabilityAgent:
    """Base class for all vulnerability assessment agents."""

    def __init__(
        self,
        name: str,
        description: str,
        config_key: str,
    ):
        """Initialize a vulnerability agent.

        Args:
            name: Name of the agent
            description: Description of the agent's purpose
            config_key: Configuration key for this agent
        """
        self.name = name
        self.description = description
        self.config_key = config_key
        self.config = get_config()
        self.openai_client = get_openai_client()

    async def process_event(self, event):
        """Process an incoming event.

        Args:
            event: The event to process
        """
        pass


class CodeAnalysisAgent(BaseVulnerabilityAgent):
    """Agent for analyzing code to identify potential vulnerabilities."""

    def __init__(self):
        """Initialize a code analysis agent."""
        super().__init__(
            name="code_analysis_agent",
            description="Agent for analyzing code to identify potential vulnerabilities",
            config_key="agents.code_analysis_agent",
        )


class KnowledgeRetrievalAgent(BaseVulnerabilityAgent):
    """Agent for retrieving vulnerability knowledge."""

    def __init__(self):
        """Initialize a knowledge retrieval agent."""
        super().__init__(
            name="knowledge_retrieval_agent",
            description="Agent for retrieving vulnerability knowledge",
            config_key="agents.knowledge_retrieval_agent",
        )


class PatternMatchingAgent(BaseVulnerabilityAgent):
    """Agent for matching vulnerability patterns in code."""

    def __init__(self):
        """Initialize a pattern matching agent."""
        super().__init__(
            name="pattern_matching_agent",
            description="Agent for matching vulnerability patterns in code",
            config_key="agents.pattern_matching_agent",
        )


class SemanticAnalysisAgent(BaseVulnerabilityAgent):
    """Agent for semantic analysis of code for vulnerabilities."""

    def __init__(self):
        """Initialize a semantic analysis agent."""
        super().__init__(
            name="semantic_analysis_agent",
            description="Agent for semantic analysis of code for vulnerabilities",
            config_key="agents.semantic_analysis_agent",
        )


class CriticAgent(BaseVulnerabilityAgent):
    """Agent for critiquing vulnerability findings."""

    def __init__(self):
        """Initialize a critic agent."""
        super().__init__(
            name="critic_agent",
            description="Agent for critiquing vulnerability findings",
            config_key="agents.critic_agent",
        )


class OrchestrationAgent(BaseVulnerabilityAgent):
    """Agent for orchestrating vulnerability research workflow."""

    def __init__(self):
        """Initialize an orchestration agent."""
        super().__init__(
            name="orchestration_agent",
            description="Agent for orchestrating vulnerability research workflow",
            config_key="agents.orchestration_agent",
        )


# Define agent factories for backward compatibility
def create_orchestrator_agent(**kwargs):
    """Create an orchestrator agent instance.

    Args:
        **kwargs: Agent configuration

    Returns:
        Orchestrator agent
    """
    if HAS_AUTOGEN:
        # Use SkwaqAgent version if autogen is available
        return SkwaqAgent(
            name="Orchestrator",
            system_message="""You are the orchestrator agent for a vulnerability assessment system.
Your role is to coordinate the activities of all specialized agents and ensure the
assessment process runs smoothly.""",
            **kwargs,
        )
    else:
        # Use simplified version
        return OrchestrationAgent()


# Legacy code below for backward compatibility
class SkwaqAgent:
    """Legacy class for backward compatibility."""

    def __init__(
        self,
        name: str,
        system_message: str,
        description: Optional[str] = None,
        **kwargs,
    ):
        """Initialize a Skwaq agent.

        Args:
            name: The name of the agent
            system_message: System message for the agent
            description: Optional description of the agent
            **kwargs: Additional configuration
        """
        self.name = name
        self.system_message = system_message
        self.description = description or f"{name} Agent"
        self.config = get_config()

    def register_event_hook(self, event_type, hook):
        """Register an event hook (dummy implementation).

        Args:
            event_type: Event type
            hook: Hook function
        """
        pass

    def emit_event(self, event):
        """Emit an event (dummy implementation).

        Args:
            event: Event to emit
        """
        logger.debug(f"Agent {self.name} emitted event: {type(event).__name__}")


# Legacy agent implementations
if HAS_AUTOGEN:

    class OrchestratorAgent(SkwaqAgent):
        """The main orchestrator agent for vulnerability assessment."""

        def __init__(
            self,
            name: str = "Orchestrator",
            system_message: Optional[str] = None,
            **kwargs,
        ):
            """Initialize orchestrator agent.

            Args:
                name: Agent name
                system_message: System message
                **kwargs: Additional configuration
            """
            if system_message is None:
                system_message = """You are the orchestrator agent for a vulnerability assessment system.
    Your role is to coordinate the activities of all specialized agents, manage workflows,
    and ensure the overall process runs smoothly."""

            super().__init__(
                name=name,
                system_message=system_message,
                description="Coordinates the overall vulnerability assessment process",
                **kwargs,
            )

        async def _on_vulnerability_discovered(self, event):
            """Handle vulnerability discovery event.

            Args:
                event: Vulnerability discovery event
            """
            logger.info(f"Vulnerability discovered: {event.vulnerability_type}")

    class KnowledgeAgent(SkwaqAgent):
        """Agent for knowledge retrieval."""

        def __init__(
            self,
            name: str = "KnowledgeAgent",
            system_message: Optional[str] = None,
            **kwargs,
        ):
            """Initialize knowledge agent.

            Args:
                name: Agent name
                system_message: System message
                **kwargs: Additional configuration
            """
            if system_message is None:
                system_message = """You are the knowledge agent for a vulnerability assessment system.
    Your role is to retrieve and provide relevant background knowledge about vulnerabilities."""

            super().__init__(
                name=name,
                system_message=system_message,
                description="Manages and retrieves background knowledge about vulnerabilities",
                **kwargs,
            )

    class CodeAnalysisAgent(SkwaqAgent):
        """Agent for code analysis."""

        def __init__(
            self,
            name: str = "CodeAnalysisAgent",
            system_message: Optional[str] = None,
            **kwargs,
        ):
            """Initialize code analysis agent.

            Args:
                name: Agent name
                system_message: System message
                **kwargs: Additional configuration
            """
            if system_message is None:
                system_message = """You are the code analysis agent for a vulnerability assessment system.
    Your role is to analyze source code for potential security vulnerabilities."""

            super().__init__(
                name=name,
                system_message=system_message,
                description="Analyzes code for potential security vulnerabilities",
                **kwargs,
            )
