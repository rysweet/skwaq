"""Test fixtures for ingestion module unit tests."""

import os
import shutil
import tempfile
from unittest.mock import AsyncMock, MagicMock

import pytest

from skwaq.db.neo4j_connector import Neo4jConnector
from skwaq.ingestion.ast_mapper import ASTFileMapper
from skwaq.ingestion.filesystem import CodebaseFileSystem
from skwaq.ingestion.repository import RepositoryHandler, RepositoryManager


@pytest.fixture
def mock_fs():
    """Create a mock filesystem with a simple codebase structure."""
    temp_dir = tempfile.mkdtemp()

    # Create a simple file structure
    os.makedirs(os.path.join(temp_dir, "src"))
    os.makedirs(os.path.join(temp_dir, "src", "utils"))
    os.makedirs(os.path.join(temp_dir, "tests"))

    # Create sample files
    with open(os.path.join(temp_dir, "src", "main.py"), "w") as f:
        f.write(
            "def main():\n    print('Hello, world!')\n\nif __name__ == '__main__':\n    main()"
        )

    with open(os.path.join(temp_dir, "src", "utils", "helpers.py"), "w") as f:
        f.write("def helper_function():\n    return 'Helper function called'")

    with open(os.path.join(temp_dir, "tests", "test_main.py"), "w") as f:
        f.write("def test_main():\n    assert True")

    with open(os.path.join(temp_dir, "README.md"), "w") as f:
        f.write("# Test Project\n\nThis is a test project for unit tests.")

    yield temp_dir

    # Cleanup
    shutil.rmtree(temp_dir)


@pytest.fixture
def mock_repo_handler():
    """Create a mock repository handler."""
    handler = MagicMock(spec=RepositoryHandler)
    handler.clone_repository.return_value = "/mock/path/repo"
    handler.get_repository_metadata.return_value = {
        "name": "test-repo",
        "branch": "main",
        "commit_hash": "abc123",
        "commit_author": "Test User <test@example.com>",
        "commit_date": "2023-01-01T00:00:00",
        "commit_message": "Test commit",
    }
    return handler


@pytest.fixture
def mock_repo_manager():
    """Create a mock repository manager."""
    manager = MagicMock(spec=RepositoryManager)
    manager.create_repository_node.return_value = 1
    manager.update_status.return_value = None
    return manager


@pytest.fixture
def mock_filesystem():
    """Create a mock CodebaseFileSystem."""
    fs = MagicMock(spec=CodebaseFileSystem)
    fs.root_path = "/mock/path/repo"
    fs.get_all_files.return_value = [
        "/mock/path/repo/src/main.py",
        "/mock/path/repo/src/utils/helpers.py",
        "/mock/path/repo/tests/test_main.py",
        "/mock/path/repo/README.md",
    ]
    fs.get_all_dirs.return_value = [
        "/mock/path/repo",
        "/mock/path/repo/src",
        "/mock/path/repo/src/utils",
        "/mock/path/repo/tests",
    ]
    fs.get_relative_path.return_value = "src/main.py"
    fs.get_file_info.return_value = {
        "extension": "py",
        "language": "python",
        "size": 100,
        "mime_type": "text/x-python",
        "encoding": "utf-8",
    }
    fs.read_file.return_value = "def main():\n    print('Hello, world!')\n\nif __name__ == '__main__':\n    main()"
    return fs


@pytest.fixture
def mock_ast_mapper():
    """Create a mock AST mapper."""
    mapper = MagicMock(spec=ASTFileMapper)
    mapper.map_ast_to_files.return_value = {
        "ast_nodes_found": 10,
        "mapped_nodes": 8,
        "unmapped_nodes": 2,
    }
    return mapper


@pytest.fixture
def mock_connector():
    """Create a mock Neo4j connector."""
    connector = MagicMock(spec=Neo4jConnector)
    connector.create_node.return_value = 1
    connector.create_relationship.return_value = True
    connector.run_query.return_value = []
    return connector


@pytest.fixture
def mock_async_model_client():
    """Create a mock async OpenAI model client."""
    client = MagicMock()
    client.get_completion = AsyncMock(
        return_value="This is a code summary generated by the LLM"
    )
    client.get_embeddings = AsyncMock(return_value=[[0.1, 0.2, 0.3, 0.4]])
    return client


@pytest.fixture
def mock_parser():
    """Create a mock code parser."""
    parser = MagicMock()
    parser.parse = AsyncMock(
        return_value={
            "success": True,
            "stats": {
                "files_processed": 3,
                "nodes_created": 50,
                "relationships_created": 100,
                "errors": 0,
            },
            "files_processed": 3,
        }
    )
    parser.connect_ast_to_files = AsyncMock(return_value=None)
    return parser


@pytest.fixture
def mock_summarizer():
    """Create a mock code summarizer."""
    summarizer = MagicMock()
    summarizer.configure.return_value = None
    summarizer.summarize_files = AsyncMock(
        return_value={
            "stats": {
                "files_processed": 3,
                "errors": 0,
                "total_tokens": 1000,
                "total_time": 5.0,
            },
            "files_processed": 3,
            "errors": [],
        }
    )
    return summarizer


@pytest.fixture
def mock_documentation_processor():
    """Create a mock documentation processor."""
    processor = MagicMock()
    processor.process_local_docs = AsyncMock(
        return_value={
            "files_processed": 2,
            "errors": 0,
        }
    )
    processor.process_remote_docs = AsyncMock(
        return_value={
            "files_processed": 1,
            "errors": 0,
        }
    )
    return processor
